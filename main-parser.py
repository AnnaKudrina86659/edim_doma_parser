"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Å–∞–π—Ç–∞ EdimDoma.ru
"""

import pandas as pd
from tqdm import tqdm
from utils.parser import get_image_links, get_recipes_from_page, clean_dataframe
from utils.gigachat import get_gigachat_token, check_vegetarian
from config import PAGES_TO_PARSE, GIGACHAT_CREDENTIALS

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ EdimDoma.ru")
    
    # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("üì∏ –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    image_links = []
    
    for page_num in tqdm(range(1, PAGES_TO_PARSE + 1)):
        current_image_links = get_image_links(page_num)
        image_links.extend(current_image_links)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_images = pd.DataFrame(image_links)
    df_images_clean = clean_dataframe(df_images)
    df_images_clean.rename(columns={'title_images': 'new_title_images'}, inplace=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    df_images_clean.to_excel('–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö_—Å—Å—ã–ª–æ–∫.xlsx', index=False)
    print("‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö_—Å—Å—ã–ª–æ–∫.xlsx'")
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ—Ü–µ–ø—Ç—ã
    print("üç≥ –ü–∞—Ä—Å–∏–º —Ä–µ—Ü–µ–ø—Ç—ã...")
    recipes_data = []
    
    for page_num in tqdm(range(1, min(PAGES_TO_PARSE, 50) + 1)):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        current_recipes = get_recipes_from_page(page_num)
        recipes_data.extend(current_recipes)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Ä–µ—Ü–µ–ø—Ç–æ–≤
    df_recipes = pd.DataFrame(recipes_data)
    df_recipes.to_csv('–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö_—Ä–µ—Ü–µ–ø—Ç–æ–≤.csv', index=False)
    print("‚úÖ –†–µ—Ü–µ–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö_—Ä–µ—Ü–µ–ø—Ç–æ–≤.csv'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –ø–æ–º–æ—â—å—é GigaChat
    print("üå± –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è GigaChat
    giga_token = get_gigachat_token(GIGACHAT_CREDENTIALS['auth_token'])
    
    if giga_token:
        df_recipes['is_vegetarian'] = None
        
        for index, row in tqdm(df_recipes.iterrows(), total=len(df_recipes)):
            vegetarian = check_vegetarian(row['ingredients'], giga_token)
            df_recipes.loc[index, 'is_vegetarian'] = vegetarian
            time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    merged_df = pd.merge(df_recipes, df_images_clean, 
                        left_on='title', right_on='new_title_images', how='inner')
    
    result_database = merged_df.drop('new_title_images', axis=1)
    
    # –û—á–∏—â–∞–µ–º —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    result_database['steps'] = result_database['steps'].apply(
        lambda x: re.sub(r'\s\s+', ', ', str(x)).rstrip(','))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    result_database.to_excel('–±–∞–∑–∞_—Ä–µ—Ü–µ–ø—Ç–æ–≤.xlsx', index=False)
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '–±–∞–∑–∞_—Ä–µ—Ü–µ–ø—Ç–æ–≤.xlsx'")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"–í—Å–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(result_database)}")
    if 'is_vegetarian' in result_database.columns:
        veg_count = result_database['is_vegetarian'].sum()
        print(f"–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤: {veg_count}")
    
    print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()